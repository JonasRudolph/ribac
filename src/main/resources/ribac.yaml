openapi: 3.0.2

info:
  title: ribac - Right Based Access Control
  version: 0.1.0-SNAPSHOT

servers:
  - url: http://localhost:8080

paths:
  /users/{userId}:
    get:
      operationId: userFetch
      summary: Returns the requested user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: Request-Id
          in: header
          required: false
          schema:
            type: string
      responses:
        200:
          description: Successfully returned the requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFetchResponse'
              example:
                requestedUser:
                  id: user123
        400:
          description: The given `userId` is too short or to long
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Value doesn't respect min length 1"
        404:
          description: There is no user with the given `userId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "A user with the id 'user123' does not exist"



    delete:
      operationId: userDelete
      summary: Deletes the requested user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: Request-Id
          in: header
          required: false
          schema:
            type: string
      responses:
        204:
          description: Successfully deleted the requested user
        404:
          description: There is no user with the given `userId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "A user with the id 'user123' does not exist"



  /users:
    get:
      operationId: userFetchAll
      summary: Returns all Users
      parameters:
        - name: Request-Id
          in: header
          required: false
          schema:
            type: string
      responses:
        200:
          description: Successfully returned all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFetchAllResponse'
              example:
                allUsers:
                  - id: user123
                  - id: abc456



    post:
      operationId: userCreate
      summary: Creates a new user
      parameters:
        - name: Request-Id
          in: header
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              id: user123
      responses:
        201:
          description: Successfully created the new user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
              example:
                createdUser:
                  id: user123
        400:
          description: The request body could not be validated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "$.id: must be at least 1 characters long"
        409:
          description: A user already exists with the given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "A user already exists with the id 'user123'"



  /groups:
    post:
      operationId: groupCreate
      summary: Creates a new group
      parameters:
        - name: Request-Id
          in: header
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
            example:
              name: group123
      responses:
        201:
          description: Successfully created the new group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupCreateResponse'
              example:
                createdUser:
                  id: user123
        400:
          description: The request body could not be validated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "$.name: must be at least 1 characters long"
        409:
          description: A group already exists with the given name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "A group already exists with the name 'group123'"


components:
  schemas:
    UserCreateResponse:
      type: object
      properties:
        createdUser:
          $ref: '#/components/schemas/User'
      required:
        - createdUser

    UserFetchResponse:
      type: object
      properties:
        requestedUser:
          $ref: '#/components/schemas/User'
      required:
        - requestedUser

    UserFetchAllResponse:
      type: object
      properties:
        allUsers:
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - allUsers

    User:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          minLength: 1
          maxLength: 255

    Group:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255

    GroupCreateResponse:
      type: object
      properties:
        createdGroup:
          $ref: '#/components/schemas/Group'
      required:
        - createdGroup

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - message
          properties:
            message:
              type: string