openapi: 3.0.3

info:
  title: ribac - Right Based Access Control
  version: 0.1.0-SNAPSHOT

servers:
  - url: http://localhost:8080

paths:
  /users/{userId}:
    get:
      operationId: userFetch
      summary: Returns the requested User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: Request-Id
          in: header
          required: false
          schema:
            type: string
      responses:
        200:
          description: Successfully returned the requested User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFetchResponse'
              example:
                requestedUser:
                  id: user123
        400:
          description: The request body could not be validated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Value doesn't respect min length 1"
                  requestId: "selfgen-c06b2f60-dc13-4324-9d06-3f92950c920b"
        404:
          description: There is no User with the given `userId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "A User with the id 'user123' does not exist"
                  requestId: "selfgen-c06b2f60-dc13-4324-9d06-3f92950c920b"



    delete:
      operationId: userDelete
      summary: Deletes the requested User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: Request-Id
          in: header
          required: false
          schema:
            type: string
      responses:
        204:
          description: Successfully deleted the requested User
        404:
          description: There is no User with the given `userId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "A User with the id 'user123' does not exist"
                  requestId: "selfgen-c06b2f60-dc13-4324-9d06-3f92950c920b"



  /users:
    get:
      operationId: userFetchAll
      summary: Returns all Users
      parameters:
        - name: Request-Id
          in: header
          required: false
          schema:
            type: string
      responses:
        200:
          description: Successfully returned all Users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFetchAllResponse'
              example:
                allUsers:
                  - id: user123
                  - id: abc456



    post:
      operationId: userCreate
      summary: Creates a new User
      parameters:
        - name: Request-Id
          in: header
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              id: user123
      responses:
        201:
          description: Successfully created the new User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
              example:
                createdUser:
                  id: user123
        400:
          description: The request body could not be validated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "$.id: must be at least 1 characters long"
                  requestId: "selfgen-c06b2f60-dc13-4324-9d06-3f92950c920b"
        409:
          description: A User already exists with the given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "A User already exists with the id 'user123'"
                  requestId: "selfgen-c06b2f60-dc13-4324-9d06-3f92950c920b"



  /groups/{groupName}:
    get:
      operationId: groupFetch
      summary: Returns the requested Group
      parameters:
        - name: groupName
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: Request-Id
          in: header
          required: false
          schema:
            type: string
      responses:
        200:
          description: Successfully returned the requested Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupFetchResponse'
              example:
                requestedGroup:
                  name: group123
        400:
          description: The request body could not be validated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Value doesn't respect min length 1"
                  requestId: "selfgen-c06b2f60-dc13-4324-9d06-3f92950c920b"
        404:
          description: There is no Group with the given `groupName`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "A Group with the name 'group123' does not exist"
                  requestId: "selfgen-c06b2f60-dc13-4324-9d06-3f92950c920b"



    delete:
      operationId: groupDelete
      summary: Deletes the requested Group
      parameters:
        - name: groupName
          in: path
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: Request-Id
          in: header
          required: false
          schema:
            type: string
      responses:
        204:
          description: Successfully deleted the requested Group
        404:
          description: There is no Group with the given `groupName`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "A Group with the name 'group123' does not exist"
                  requestId: "selfgen-c06b2f60-dc13-4324-9d06-3f92950c920b"


  /groups:
    get:
      operationId: groupFetchAll
      summary: Returns all Groups
      parameters:
        - name: Request-Id
          in: header
          required: false
          schema:
            type: string
      responses:
        200:
          description: Successfully returned all Groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupFetchAllResponse'
              example:
                allgroups:
                  - name: group123
                  - name: abc456



    post:
      operationId: groupCreate
      summary: Creates a new Group
      parameters:
        - name: Request-Id
          in: header
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
            example:
              name: group123
      responses:
        201:
          description: Successfully created the new Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupCreateResponse'
              example:
                createdGroup:
                  id: group123
        400:
          description: The request body could not be validated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "$.name: must be at least 1 characters long"
                  requestId: "selfgen-c06b2f60-dc13-4324-9d06-3f92950c920b"
        409:
          description: A Group already exists with the given name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "A Group already exists with the name 'group123'"
                  requestId: "selfgen-c06b2f60-dc13-4324-9d06-3f92950c920b"



components:
  schemas:
    UserCreateResponse:
      type: object
      properties:
        createdUser:
          $ref: '#/components/schemas/User'
      required:
        - createdUser

    UserFetchResponse:
      type: object
      properties:
        requestedUser:
          $ref: '#/components/schemas/User'
      required:
        - requestedUser

    UserFetchAllResponse:
      type: object
      properties:
        allUsers:
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - allUsers

    User:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          minLength: 1
          maxLength: 255

    GroupFetchAllResponse:
      type: object
      properties:
        allGroups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
      required:
        - allGroups

    Group:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255

    GroupCreateResponse:
      type: object
      properties:
        createdGroup:
          $ref: '#/components/schemas/Group'
      required:
        - createdGroup

    GroupFetchResponse:
      type: object
      properties:
        requestedGroup:
          $ref: '#/components/schemas/Group'
      required:
        - requestedGroup

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - message
            - requestId
          properties:
            message:
              type: string
            requestId:
              type: string